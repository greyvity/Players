{"version":3,"sources":["Assets/Audio/Begin.mp3","Assets/Audio/cute.mp3","Assets/Audio/summer.mp3","Assets/Audio/rock.mp3","Assets/Audio/ukelele.mp3","Assets/Audio/creative.mp3","Components/Toggle/Toggle.js","Components/Audio/controlAudio/controlAudio.js","Components/Audio/ChangeAudio/changeAudio.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Toggle","React","Component","className","sources","begin","Begin","cute","summer","creative","ukelele","rock","App","props","state","src","isPlaying","changeSrc","bind","player","audio","Audio","newSrc","this","button","document","querySelector","paused","play","innerHTML","pause","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,mC,kBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,4LCmB5BC,GClBYC,IAAMC,UCCPD,IAAMC,U,6KFG5B,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,cACb,sCAGF,yBAAKA,UAAU,cACb,2C,GATWF,IAAMC,Y,oGGWrBE,EAAU,CACdC,MAAOC,IACPC,KAAMA,IACNC,OAAQA,IACRC,SAAUA,IACVC,QAASA,IACTC,KAAMA,KA+COC,E,kDA3Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,IAAKX,EAAQC,MACbW,WAAW,GAEb,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBAEd,EAAKE,MAAQ,IAAIC,MAAMf,KAVN,E,sDAaTgB,GAIRC,KAAKH,MAAML,IAAMX,EAAQkB,GACzBC,KAAKJ,W,+BAIL,IAAIK,EAASC,SAASC,cAAc,WAChCH,KAAKH,MAAMO,QACbJ,KAAKH,MAAMQ,OACXJ,EAAOK,UAAY,UAEnBN,KAAKH,MAAMU,QACXN,EAAOK,UAAY,U,+BAKrB,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,W,GApCUF,IAAMC,WCXlB6B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhC,QACf0B,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASkC,eAAe,SDYnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,WAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,WAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.c49048b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Begin.8d647f68.mp3\";","module.exports = __webpack_public_path__ + \"static/media/cute.0466433c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/summer.fd79b114.mp3\";","module.exports = __webpack_public_path__ + \"static/media/rock.80276ac2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/ukelele.95698692.mp3\";","module.exports = __webpack_public_path__ + \"static/media/creative.e175412e.mp3\";","import React from \"react\";\r\nimport \"./Toggle.css\";\r\n\r\nclass Toggle extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"audio card\">\r\n          <h3>Audio</h3>\r\n        </div>\r\n\r\n        <div className=\"video card\">\r\n          <h3>Video</h3>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Toggle;\r\n","import React from \"react\";\r\nclass AudioDisplay extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"display\">\r\n        <button className=\"Button\" onClick={this.props.onClick}>\r\n          Play\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AudioDisplay;\r\n","import React from \"react\";\r\n\r\nclass ChangeAudio extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange(e) {\r\n    console.log(e.target.value);\r\n    this.props.changeSrc(e.target.value);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"inputs\">\r\n        <form action=\"#\" onClick={this.handleChange}>\r\n          <input type=\"radio\" name=\"selection\" value=\"cute\" /> cute\r\n          <input type=\"radio\" name=\"selection\" value=\"rock\" /> rock\r\n          <input type=\"radio\" name=\"selection\" value=\"summer\" /> summer\r\n          <input type=\"radio\" name=\"selection\" value=\"begin\" /> begin\r\n          <input type=\"radio\" name=\"selection\" value=\"creative\" /> creative\r\n          <input type=\"radio\" name=\"selection\" value=\"ukelele\" /> ukelele\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ChangeAudio;\r\n","import React from \"react\";\nimport AudioDisplay from \"./Components/Audio/controlAudio/controlAudio\";\nimport ChangeAudio from \"./Components/Audio/ChangeAudio/changeAudio\";\nimport Toggle from \"./Components/Toggle/Toggle\";\n// import \"./App.css\";\n\n// import vid from \"../src/Nilu.mp4\";\nimport Begin from \"./Assets/Audio/Begin.mp3\";\nimport cute from \"./Assets/Audio/cute.mp3\";\nimport summer from \"./Assets/Audio/summer.mp3\";\nimport rock from \"./Assets/Audio/rock.mp3\";\nimport ukelele from \"./Assets/Audio/ukelele.mp3\";\nimport creative from \"./Assets/Audio/creative.mp3\";\n\nconst sources = {\n  begin: Begin,\n  cute: cute,\n  summer: summer,\n  creative: creative,\n  ukelele: ukelele,\n  rock: rock,\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      src: sources.begin,\n      isPlaying: false,\n    };\n    this.changeSrc = this.changeSrc.bind(this);\n    this.player = this.player.bind(this);\n\n    this.audio = new Audio(Begin);\n  }\n\n  changeSrc(newSrc) {\n    // this.setState({\n    //   src: sources[newSrc],\n    // });\n    this.audio.src = sources[newSrc];\n    this.player();\n  }\n\n  player() {\n    let button = document.querySelector(\".Button\");\n    if (this.audio.paused) {\n      this.audio.play();\n      button.innerHTML = \"Pause\";\n    } else {\n      this.audio.pause();\n      button.innerHTML = \"Play\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Toggle />\n        {/* <ChangeAudio changeSrc={this.changeSrc} />\n        <AudioDisplay onClick={this.player} /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}